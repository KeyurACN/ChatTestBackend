const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
 // Adjust the path as needed
const mongoose = require("mongoose");
const User = require("../Models/userModal");

const RegisterUserinfo = async (req, res, next) => {
  const { name, email, password } = req.body;

  if (password.length < 8) {
    res.status(400).json({ msg: "Password needs at least 8 characters" });
    return;
  }

  try {
    let user = await User.findOne({ email });
    if (user) {
      res.status(409).json({ msg: "User Already Exists" });
    } else {
      bcrypt.hash(password, 4, async (err, hash) => {
        if (err) {
          console.log("Error hashing password", err);
          return res.status(500).json({ msg: "Error in hashing password" });
        }
        try {
          const newUser = new User({
            name,
            email,
            password: hash,
          });
          // Save the user and handle validation errors
          await newUser.save();
          res.status(201).json({ msg: "User Registered Successfully", userinfo: newUser });
        } catch (error) {
          if (error instanceof mongoose.Error.ValidationError) {
            const errorMessages = Object.values(error.errors).map(err => err.message);
            res.status(400).json({ msg: "Validation error", errors: errorMessages });
          } else {
            console.error("Unexpected error:", error);
            res.status(500).json({ msg: "Something went wrong, please try again later" });
          }
        }
      });
    }
  } catch (err) {
    console.error("Unexpected error:", err);
    res.status(500).json({ msg: "Something went wrong, please try again later" });
  }
};

const LoginUser = async (req, res, next) => {
  const { email, password } = req.body;

  try {
    let user = await User.findOne({ email });
    if (!user) {
      res.status(401).json({ msg: "Invalid email or password" });
      return;
    }

    const passwordMatch = await bcrypt.compare(password, user.password);
    if (!passwordMatch) {
      res.status(401).json({ msg: "Invalid email or password" });
      return;
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);
    res.status(200).json({ msg: "Logged in successfully", token });
  } catch (err) {
    res.status(500).json({ msg: "Something went wrong, please try again later" });
  }
};

module.exports = { RegisterUserinfo, LoginUser };
